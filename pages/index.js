import Head from 'next/head'
import React, { useEffect, useState } from "react";
import { v4 as uuidv4 } from 'uuid';
import { createInstance } from "@optimizely/optimizely-sdk";

import { useRouter } from 'next/router'

import ABComponent from "../component/ABComponent";
import FeatureFlagComponent from "../component/FeatureFlagComponent";
import MultiArmBanditComponent from "../component/MultiArmBanditComponent";

const sdkKey = process.env.NEXT_PUBLIC_SDK_KEY;
const dataFileUrl = `https://cdn.optimizely.com/datafiles/${sdkKey}.json`;

export default function Home({...props}) {

  const [ isFeatureEnabled, renderIsFeatureEnabled ] = useState(false);
  let [ backgroundColor, setBackgroundColor ] = useState('');
  let [ componentTitle, setComponentTitle ] = useState('');
  let [ postData, setPostData ] = useState({});

  const router = useRouter();

  const optimizelyClient = createInstance({
    datafile: props?.datafile,
  });

  // Got user Id either via query-string, or, create a random one
  const { id, location } = router.query
  const userId = id || uuidv4();

  let optimizelyUserContext;

  optimizelyClient.onReady().then(() => {
    optimizelyUserContext = optimizelyClient.createUserContext(
      userId,
      {
        location: location || "london",
        deviceType: "ios"
      }
    );
  });

  useEffect(() => {

    optimizelyClient.onReady().then(() => {

       // Feature flag code
       const featureFlag = optimizelyUserContext.decide('feature_flag');
       console.log('featureFlag', featureFlag);
       renderIsFeatureEnabled(featureFlag.enabled);

       // AB Testing Code
       const abTestFlag = optimizelyUserContext.decide('ab_test');
       console.log('abTest', abTestFlag);
       setBackgroundColor(abTestFlag.variables.backgroundcolour);
       setComponentTitle(abTestFlag.variables.component_title);

      /// Multi-arm bandit code
      const apiDataJson = optimizelyClient.getFeatureVariable('multi-arm_bandit', 'api_data', userId);
      const apiUrl = apiDataJson?.url;

      const fetchData = async () => {
        const response = await fetch(apiUrl);
        const json = await response.json();

        console.log('API Call', apiUrl, json);
        setPostData(json);
      }

      fetchData().catch(console.error);
    });
  }, []);

  return (
    <>
      <Head>

        <title>
          Optimizely Fullstack Javascript
        </title>

        <meta name="description" content="Generated by JonDJones" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {isFeatureEnabled &&
        <FeatureFlagComponent userId={userId} optimizelyClient={optimizelyClient} />
      }

      <section id="main">

        <ABComponent key={`${componentTitle}${backgroundColor}`} userId={userId} optimizelyClient={optimizelyClient} backgroundColor={backgroundColor} componentTitle={componentTitle} />

        <MultiArmBanditComponent key={postData.id} userId={userId} optimizelyClient={optimizelyClient} postId={postData.id} title={postData.title} body={postData.body}/>

      </section>
    </>
  )
}

export async function getServerSideProps(context) {
  const response = await fetch(dataFileUrl);
  const datafile = await response.json();

  return {
    props: {
      datafile
    }
  }
}
